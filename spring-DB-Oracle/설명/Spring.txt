

RESTfull(Representational State Transfer) : 웹 서비스에서 서비스 설계 원칙중 하나
				     컴퓨터에서 자원을 표현하고 자원을 표현한 상태를 전달하는 아키텍쳐 스타일 
				     1.자원(Resource) : 웹 상에 존재하는 모든 개체를 나타냄
				     주문 , 제품 등 모든 것은 자원

				     2.표현(Representation) : 자원의 상태를 나타내는 것
							HTML,XML JSON 등의 형식으로 표현됨
							클라이언트는 서버로부터 자원의 포현을 받아서 해석
				    3. URL(Uniform Resource Indentifier) : 자원을 고유하게 식별하기 위한 문자열

		
				    4.HTTP Methods : 자원에 대한 특정 동작을 나타냄
						    GET(조회), POST(생성), PUT(수정), DELETE(삭제)등이 있음


				예제 : 
					자원 : 사용을 하는 사용자
					URL : /users
 					HTTP메서드 :
						모든 사용자 조회 : GET /users 
						특정 사용자를 조회 : GET /users/{id}
						새로운 사용자를 생성 : POST /users
						특정 사용자를 수정 :  PUT /users/{id}
						특정 사용자를 삭제 : DELETE / users/{id}


CRUD : 데이터베이스에서 쓰는 작업 조작 기능

RESTfull : 웹 서비스 자원을 표현하고 상태를 전송하는 역할 
	CRUD 작업을 수행하는데 사용할 수 있음




Spring Boot Devtools : Spring Boot 개발 환경을 향상시키기 위한 도구 모음 
		LiveReload : 브라우저를 자동으로 새로 고치고 스타일 시트 및 템플릿 변경사항을 실시간으로 반영

		속성재실행 : application.preperties 변경된 내용을 감지하고 런타임 중에 속성을 다시 재실행 시켜줌
	


Spring Boot Actuator  : 모니터링하고 관리하기 위한 확장 모듈
		애플리케이션의 운영 환경에서 정보를 제공하고, 엔드포인트를 통해서 상태를 조회하고 조작할 수 있도록 함 


		엔드포인트 : 네트워크에서 통신이 가능한 지점
			특정 URL에 HTTP (GET, POST 등) 사용해서 요청을 보내면 
			해당 지점에서 특정 동작이 수행

			1. health: 내 애플리케이션 건강한지 건강의 유무는 Up이나 Down으로 나타냄
			2. info : 애플리케이션의 정보를 제공하는 공간 사용자의 정의 정보를 포함할 수 있음
   			3. metrice : 애플리케이션의 메모리 사용이나 Garbage Collection 횟 수 등의 정보를 확인할 수 있음





Thymeleaf(타임리프) :
	Java template 엔진으로 HTML, XML, JavaScript, CSS 등의 마크업 언어를 처리하는데 사용
	디자인이나 데이터를  템플릿에 전달하고 동적으로 페이지 생성을 가능하게 함 



Spring Web 
	스프링 프레임워크 일부, 웹 애플리케이션을 개발하는데 사용되는 모듈
	주로 동기식 웹 애플리케이션을 구축하는데 중점을 두고 있음
	Spring MVC(model-view-Controller):전통적인 MVC패턴을 사용해서
	애플리케이션을 구성, 요청과 응답을 처리하기 위해서 컨트롤러 모델 뷰를 사용


RESTful  웹 서비스 : 주석과 규칙을 활용해서 RESTfull 를 구축할 수 있도록 지원


webSocket : 웹소켓을 통해서 실시간 양방향 통신을 지원해서 클라이언트와 서버간에 데이터를 실제로 교환하도록 함 















스프링(Spring) 
Java로 프로그래밍을 할 수 있는 틀을 제공
Spring 코드를 참조하기 쉽고 편리한 구조로 다른 기술들을 더 쉽게 사용해주는 오픈소스 프레임워크


어떤 목적을 달성하기 위해서 약속된 도구를 통해 복잡하게 얽혀있는 문제들을 쉽게 해결할 수 있게 도와줌
(틀)뼈대 역할을 하는 존재
프레임워크

loC(Inversion of Control 제어 반전)
객체의 생성부터 소멸까지 개발자가 아니라 스프링 컨테이너가 대신 해주는 것
프로그램을 제어하는 제어권이 개발자가 아니라 IoC에 있고, IoC가 개발자의 코드를 호출하여 필요한 객체를 생성, 소멸해서 생명주기를 관리하는
역할을 함



DI (Dependency Injection, 의존성 주입)
프로그램에서 구성 요소의 의존하는 관계가 소스코드 내부가 아니라 외부에서 설정 파일을 통해 정의 내리는 방식


라이브러리나 API, 프레임워크를 연동할 때 직접 코드를 작성해서 연결하는 것이 아니라 외부 파일을 연결해서 불러오는 방식을 사용

코드 간의 재사용성을 높이고, 소스코드를 다양한 공간에서 사용하면서 결합도를 낮출 수 있음

결합도 : 파일 간에 의존하는 정도나 파일 사이에 연관 관계를 나타냄







AOP(Aspect Object Programing, 관점 지향 프로그래밍)
여러 파일에서 공통적으로 사용하는 기능을 분리하고 관리할 수 있음

각각의 클래스들이 존재할 때, 클래스마다 공통된 코드와 중복되는 기능이 많을 경우 코드의 실용성과 가독성 및 개발속도에 좋지 않기 때문에 
중복된 코드를 최대한 단축시키고 재사용성을 높여주는 방식을 사용하는 것  




POJO(Pain Old Java Object) : 
	Java EE 사용하면서 해당 플랫폼에 종속되어 있는 무거운 객체를 만드는 것에 반발해서 나타난 용어
	진정하게 객체지향적인 원리에 충실하면서 환경과 기술에 종속되지 않고 필요에 따라 재활용 될 수 있는 방식으로 설계하는 방식
 


스프링 부트(Spring Boot)
	스프링 기반의 애플리케이션을 빠르고 쉽게 개발할 수 있도록 도와주는 프로젝트 기본 설정이 사전에 정의되어 있기 때문에 개발자가 
	별도의 설정 없이 높은 생산도를 지원
	내장형 서버를 포함해서 애플리케이션의 독립성을 강조해서 개발자가 빠르게 개발 테스트를 배포할 수 있도록 



 라이브러리 




 






Maven 

XML  <
텍스트 기반의 언어
프로젝트의 구조 의존성 빌드 설정과 같은 내용을 기술
문법을 간결화

























